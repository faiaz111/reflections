What happens when you initialize a repository? Why do you need to do it?

When I initialise a repository a ".git" file is created in that repository which is hidden by default and can be viewed using "ls -a" command from the terminal. This is done to enable git features such as version control on that repository. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area can be thought of an intermediate stage between the working directory and the repository. Working directory can contain lot of files some of which may be relevant to each other while some might not be relevant to any other files. All relevent files can be bought in the staging area. Then those relevant files in the staging area can be committed as a single commit in the repository. Files that doesn't relate to each other can be bring (one at a time) separately in staging area from working directory and can be commited in the repository. 

Staging area allows to commit all relevant files together in a single commit. As a result, if a commit is checked out then all the files will be restored at the stage of that commit. If there was no staging area then all files will need to be commited separtely even if they are relevant to each other. It will then be more harder to track changes and restoring to an old commit. 

 How can you use the staging area to make sure you have one commit per logical change?

 I can add all the files in the staging area that are relevant to a particular change e.g. a function in one file and the call to the function in another file. Then I can commit those files in a single commit to the repository. In this way, staging area can be used to ensure that there is one commit per logical change. 

 What are some situations when branches would be helpful in keeping your history organized? How would branches help?

 Branches can be used to test out experimental features which are not finalised to be used yet without affecting the working version of the project. If the experimental features doesn't end up successful then the master branch can be used for restoring the working version. 

 Branches can also be used for separating different versions of an application. For example, an app that is targeted to french and italian users can have two different versions, one in french another in italian which can be separated using branch. 

 How do the diagrams help you visualize the branch structure?

The diagram shows the master and the commits associated with the masters in a linear order (most recent first). Any branches that were created is shown as a branch connected to the master. Similarly, the branch shows all the commits associated with the branch in a linear order (most recent first). As a result, commits are related to masters and commits that are related to specific branches can easily be distinguished. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging combines two different versions of a file into one file. For example, two people is working on the same version of a file separately and are making changes to them independent of each other. If we consider each person's work as a branch then there is two branch. This two branch can be merged together to create a single file containing the changes made by both of them. When deciding which change will be included in the final file and which one won't, git compares the two versions of the file with the original file. 

Branches are represent using a diagram to make it easy for humans to understand. The diagram can show the master and the commits associated with the master. Also it will show the branch coming out of the master and the commits associated with the branch.  









