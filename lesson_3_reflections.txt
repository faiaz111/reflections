When would you want to use a remote repository rather than keeping all your work local?

I would use a remote repository rather keeping all my work local when there is multiple people working on the same project. In this way,
everyone can contribute to the project and individual's work can be shared with others working in the project. I can also use a remote 
repository to share my own public projects with others so that eveyone else can use my project for their own project. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If git automatically pull changes to local repsitory from remote repository there will be lot of commits in the local repository which I don't actually want to pull. As a result the local repository will be more cluttered with unnecessary commits and will make it harder to work with the project.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks: Forks is used for copying repositories that is not owned by me. By forking, other people's projects can be copied in my own repository so that I can make changes to them for my own project without effecting the original project which is owned by someone else.  

Clones: Clones is used for copying a remote repository to a local computer. Github allows to make live changes on simple files like text files. But for code files, it needs to be cloned into a local computer first so that changes can be made to it.

Branches: Branches are used to test new features and fixing bugs without breaking the original code. It's very handy when there is multiple people working on a project. For example, if two people is working on a project then both can have their own version of the original code. They can modify their versions to make changes and then both the versions (which is called branch) can be merged together to include changes done by both persons in the master branch (original code file). When deciding which change to keep and which one to not, it can be done automatically by git, by comparing the changes to the original code and incase of a conflict it has to be done manually by the persons to decide which change to keep and which one to not or if they wish they could discard both their changes and revert back to the original code. 

What is the benefit of having a copy of the last known state of the remote stored locally?

Having a copy of the last known state of the remote helps identify if there are commits that still hasn't been pushed to the remote from local. It also shows the location of the local master and remote master and if they are ahead, behind, up-to-date or out of sync. This helps in resolving conflict during merging especially when there is multiple people collaborating on a project from multiple different computers. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without using git or github, collaboration can be done using cloud storages and sharing files and folders with team members. But in terms of programming, this will be very unclean and inconvenient. For a project where only one individual is working it might be ok conidering the project is private and doesn't need to be shared with the 
community. But for projects where multiple people is collaborating from multile different computers, using online storage solutions to collaborate will be very hard and time-consuming. There will be lot of uploading and downloading of zipped files back and forth. Online storage solution overrides i.e. the original file get changed if same file with a same name is uploaded and it will create a revision history for that. As a result testing out experimental features which are not yer finalised can't be done without effecting the original file. 

Git and github is build with code in mind and overcomes the disadvantages mentioned above. It allows users to have multiple different versions of their code without effecting the original code file, save changes as specified by users so that no changes are lost, testing experimental features and fixing bugs without effectiong original file and most importantly it allows mulpile people to collaborate on a project in a very efficient manner.  

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Branches allow to test new features and functions without effecting or modifying the original code. I will use branch for the same purpose so that my original code isn't effected by my new features which are in development stage. Once I finished developing the feature I can merge the master branch to my new feature branch to check if my new feature integrates and work properly with the master. If it does then I can merge the branch on which I developed my new feature to the master branch and then delete the new feature branch. If my feature doesn't work properly or turns out not to enhance the application being developed then I can simply delete my feature branch without integrating with the master and the original code file (master) remains unchanged. 

I would only modify master directly when there are very little change or when I am implementing something that I am complety sure of and is not an experiment. Making big changes in master or testing new features directly on master is a very risky business as it might break the master (original code) and is not recommended at all.

 












